////////////////////////////////////////////////////////////////////////////////
// Filename: Light.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
Texture2D blendTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 diffuseColor;
    float4 ambientColor;
    float3 lightDirection;
	float3 cameraPosition;
    float padding;
};

//////////////
// TYPEDEFS //
//////////////

struct PixelInputType
{
    float4 position : SV_POSITION;
	//float4 position_world : POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
	float3 color : COLOR;
};

struct DirectionalLight
{
    float4 color;
    float3 dir;
};
 
struct Material
{
    float Ka, Kd, Ks, A;
};

//////////////
// FUNCTIONS //
//////////////

//--------------------------------------------------------------------------------------
// Phong Lighting Reflection Model
//--------------------------------------------------------------------------------------
float4 calcPhongLighting( Material M, float4 LColor, float4 texColor, float3 N, float3 L, float3 V, float3 R )
{
    float4 Ia = M.Ka * ambientColor;
    float4 Id = M.Kd * saturate( dot(N,L) );
    float4 Is = M.Ks * pow( saturate(dot(V,R)), M.A );
 
    return (saturate(Ia + (Id + Is)) * texColor * LColor);
}

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_Target
{
    float4 textureColor;
	float4 blendTextureColor;
	float4 color;

	float4 eye = float4(cameraPosition, 0.0f);
	DirectionalLight light;
	light.dir = lightDirection;
	light.color = float4(0.7f, 0.7f, 0.7f, 0.0f);
	Material material;
	material.Ka = 0.1f;
	material.Kd = 0.65f;
	material.Ks = 0.10f;
	material.A = 2;

	//calculate lighting vectors - renormalize vectors
    float3 V = normalize( eye - (float3) input.position );
    float3 R = reflect( -light.dir, input.normal);

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);
	textureColor.a = 1.0f;

    float4 I = calcPhongLighting( material, light.color, textureColor, input.normal, -light.dir, V, R );
	color = I ;

	return color;
}